using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

using Hacknet;

using HollowZero.Nodes;
using HollowZero.Executables;

using Pathfinder.Executable;

namespace HollowZero
{
    public class DefaultMalware
    {
        private static readonly Computer AttackerComp = NodeGenerator.GenerateAndAddComputer("Attacker Node");

        private static readonly List<Malware> malwares = new List<Malware>()
        {
            new Malware()
            {
                DisplayName = "Cryptominer",
                Description = "A persistent mining software runs on your system. You won't see a penny. (-100 Max RAM)",
                PowerLevel = 100,
                Trigger = Malware.MalwareTrigger.PERSISTENT,
                PowerAction = delegate(int _)
                {
                    if(OS.currentInstance.exes.Exists(exe => exe.IdentifierName == "Cryptominer")) return;
                    Cryptominer cryptominer = new Cryptominer();
                    cryptominer.bounds.X = OS.currentInstance.ram.bounds.X;
                    cryptominer.bounds.Width = OS.currentInstance.ram.bounds.Width;
                    OS.currentInstance.AddGameExecutable(cryptominer);
                },
                RemoveAction = delegate(int _p, List<Computer> _c)
                {
                    if(!OS.currentInstance.exes.Exists(exe => exe.IdentifierName == "Cryptominer")) return;
                    OS.currentInstance.exes.First(exe => exe.IdentifierName == "Cryptominer").isExiting = true;
                }
            },
            new Malware()
            {
                DisplayName = "Botnet",
                Description = "Now you've really pissed someone off... (Randomly get attacked by an outside node.)",
                PowerLevel = 300,
                Trigger = Malware.MalwareTrigger.PERSISTENT,
                PowerAction = delegate(int _)
                {
                    if(!MalwareEffects.QueuedMalware.Exists(q => q == "Botnet")) return;
                    MalwareEffects.QueuedMalware.Remove("Botnet");

                    Random random = new Random();
                    int rng = random.Next(0, 100);
                    if(rng < 40) return;

                    AttackSequence(AttackerComp);
                },
                RemoveAction = delegate(int _p, List<Computer> _c)
                {
                    if(HollowTimer.timers.Exists(t => t.Item1 == "malware_attack"))
                    {
                        HollowTimer.timers.RemoveAt(HollowTimer.timers.FindIndex(t => t.Item1 == "malware_attack"));
                    }
                    if(!MalwareEffects.MalwareTimers.Keys.Any(m => m.DisplayName == "Botnet")) return;
                    var m = MalwareEffects.MalwareTimers.FirstOrDefault(m => m.Key.DisplayName == "Botnet");
                    MalwareEffects.MalwareTimers.Remove(m.Key);
                },
                SetTimer = true
            },
            new Malware()
            {
                DisplayName = "Adware",
                Description = "Congratulations, You Won ! (Random chance to lose 25 credits every time you trigger an event.)",
                PowerLevel = 25,
                Trigger = Malware.MalwareTrigger.EVERY_ACTION,
                PowerAction = delegate(int _)
                {
                    Random random = new Random();
                    int rng = random.Next(0, 100);
                    if(rng < 65) return;

                    HollowZeroCore.RemovePlayerCredits(25);
                },
                RemoveAction = delegate(int _p, List<Computer> _c)
                {
                    return; // This malware doesn't need to do anything...
                }
            }
        };

        private static void AttackSequence(Computer attacker)
        {
            OS.currentInstance.thisComputer.connect(attacker.ip);

            Action attack = delegate ()
            {
                OS.currentInstance.thisComputer.forkBombClients(attacker.ip);
            };
            var timerTuple = Tuple.Create("malware_attack", 5.3f, attack);
            HollowTimer.timers.Add(timerTuple);
        }

        public static ReadOnlyCollection<Malware> MalwareCollection = new ReadOnlyCollection<Malware>(malwares);
    }
}
